import{a as h,b as M}from"./chunks/mermaid-parser.esm.min/chunk-LJ5OPE33.mjs";import{a as j,b as G}from"./chunks/mermaid-parser.esm.min/chunk-4V3OO4RO.mjs";import{a as z,b as D}from"./chunks/mermaid-parser.esm.min/chunk-B4BZQCZU.mjs";import{a as s,g as p,h as m,i as P,j as f,k as u,l as x,m as g,n as l,o as d,p as k,q as y,r as T,s as w,t as S,u as A,v as I,w as v,x as L,y as R}from"./chunks/mermaid-parser.esm.min/chunk-F3H5QLAC.mjs";var a={},E={info:s(async()=>{let{createInfoServices:e}=await import("./chunks/mermaid-parser.esm.min/info-RYNPLEXD.mjs"),r=e().Info.parser.LangiumParser;a.info=r},"info"),packet:s(async()=>{let{createPacketServices:e}=await import("./chunks/mermaid-parser.esm.min/packet-N6ZXBPW3.mjs"),r=e().Packet.parser.LangiumParser;a.packet=r},"packet"),pie:s(async()=>{let{createPieServices:e}=await import("./chunks/mermaid-parser.esm.min/pie-6S6XDCAD.mjs"),r=e().Pie.parser.LangiumParser;a.pie=r},"pie")};async function F(e,r){let o=E[e];if(!o)throw new Error(`Unknown diagram type: ${e}`);a[e]||await o();let t=a[e].parse(r);if(t.lexerErrors.length>0||t.parserErrors.length>0)throw new n(t);return t.value}s(F,"parse");var n=class extends Error{constructor(o){let c=o.lexerErrors.map(i=>i.message).join(`
`),t=o.parserErrors.map(i=>i.message).join(`
`);super(`Parsing failed: ${c} ${t}`);this.result=o}static{s(this,"MermaidParseError")}};export{I as AbstractMermaidTokenBuilder,L as AbstractMermaidValueConverter,v as CommonTokenBuilder,R as CommonValueConverter,m as Info,w as InfoGeneratedModule,h as InfoModule,T as MermaidGeneratedSharedModule,n as MermaidParseError,f as Packet,x as PacketBlock,S as PacketGeneratedModule,j as PacketModule,l as Pie,A as PieGeneratedModule,z as PieModule,k as PieSection,M as createInfoServices,G as createPacketServices,D as createPieServices,p as isCommon,P as isInfo,u as isPacket,g as isPacketBlock,d as isPie,y as isPieSection,F as parse};
