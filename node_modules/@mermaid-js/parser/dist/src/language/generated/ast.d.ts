/******************************************************************************
 * This file was generated by langium-cli 3.0.3.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/
import type { AstNode, ReferenceInfo, TypeMetaData } from 'langium';
import { AbstractAstReflection } from 'langium';
export declare const MermaidTerminals: {
    NEWLINE: RegExp;
    ACC_DESCR: RegExp;
    ACC_TITLE: RegExp;
    TITLE: RegExp;
    WHITESPACE: RegExp;
    YAML: RegExp;
    DIRECTIVE: RegExp;
    SINGLE_LINE_COMMENT: RegExp;
    INT: RegExp;
    STRING: RegExp;
    PIE_SECTION_LABEL: RegExp;
    PIE_SECTION_VALUE: RegExp;
};
export interface Common extends AstNode {
    readonly $type: 'Common';
    accDescr?: string;
    accTitle?: string;
    title?: string;
}
export declare const Common = "Common";
export declare function isCommon(item: unknown): item is Common;
export interface Info extends AstNode {
    readonly $type: 'Info';
    accDescr?: string;
    accTitle?: string;
    title?: string;
}
export declare const Info = "Info";
export declare function isInfo(item: unknown): item is Info;
export interface Packet extends AstNode {
    readonly $type: 'Packet';
    accDescr?: string;
    accTitle?: string;
    blocks: Array<PacketBlock>;
    title?: string;
}
export declare const Packet = "Packet";
export declare function isPacket(item: unknown): item is Packet;
export interface PacketBlock extends AstNode {
    readonly $container: Packet;
    readonly $type: 'PacketBlock';
    end?: number;
    label: string;
    start: number;
}
export declare const PacketBlock = "PacketBlock";
export declare function isPacketBlock(item: unknown): item is PacketBlock;
export interface Pie extends AstNode {
    readonly $type: 'Pie';
    accDescr?: string;
    accTitle?: string;
    sections: Array<PieSection>;
    showData: boolean;
    title?: string;
}
export declare const Pie = "Pie";
export declare function isPie(item: unknown): item is Pie;
export interface PieSection extends AstNode {
    readonly $container: Pie;
    readonly $type: 'PieSection';
    label: string;
    value: number;
}
export declare const PieSection = "PieSection";
export declare function isPieSection(item: unknown): item is PieSection;
export type MermaidAstType = {
    Common: Common;
    Info: Info;
    Packet: Packet;
    PacketBlock: PacketBlock;
    Pie: Pie;
    PieSection: PieSection;
};
export declare class MermaidAstReflection extends AbstractAstReflection {
    getAllTypes(): string[];
    protected computeIsSubtype(subtype: string, supertype: string): boolean;
    getReferenceType(refInfo: ReferenceInfo): string;
    getTypeMetaData(type: string): TypeMetaData;
}
export declare const reflection: MermaidAstReflection;
